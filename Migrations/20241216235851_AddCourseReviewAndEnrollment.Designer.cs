// <auto-generated />
using System;
using GraduationProjectBackendAPI.Models.AppDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraduationProjectBackendAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241216235851_AddCourseReviewAndEnrollment")]
    partial class AddCourseReviewAndEnrollment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.AccountVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CheckedOK")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccountVerificationT");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"), 1L, 1);

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("SectionId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.CourseEnrollment", b =>
                {
                    b.Property<int>("CourseEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseEnrollmentId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseEnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.CourseReview", b =>
                {
                    b.Property<int>("CourseReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseReviewId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CourseReviewId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Courses", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelOrder")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.HasIndex("CourseId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"), 1L, 1);

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"), 1L, 1);

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionOrder")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("LevelId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.TaskT", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"), 1L, 1);

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadFileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("TaskTs");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.UserProgress", b =>
                {
                    b.Property<int>("UserProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProgressId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserProgressId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProgresses");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.User.BlacklistToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistTokensT");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.User.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UsersT");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.UserDetails", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Edu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("National")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("DetailsT");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.UserVisitHistory", b =>
                {
                    b.Property<int>("HisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HisId"), 1L, 1);

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HisId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVisitHistoryT");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.AccountVerification", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithOne("AccountVerification")
                        .HasForeignKey("GraduationProjectBackendAPI.Models.AccountVerification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Content", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Section", "Section")
                        .WithMany("Contents")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.CourseEnrollment", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Courses", "Course")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.CourseReview", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Courses", "Course")
                        .WithMany("CourseReviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithMany("CourseReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Level", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Courses", "Course")
                        .WithMany("Levels")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Quiz", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Section", "Section")
                        .WithOne("Quiz")
                        .HasForeignKey("GraduationProjectBackendAPI.Models.Courses.Quiz", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Section", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Level", "Level")
                        .WithMany("Sections")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.TaskT", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Section", "Section")
                        .WithOne("Task")
                        .HasForeignKey("GraduationProjectBackendAPI.Models.Courses.TaskT", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.UserProgress", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.Courses.Courses", "Course")
                        .WithMany("UserProgresses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithMany("UserProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.UserDetails", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("GraduationProjectBackendAPI.Models.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.UserVisitHistory", b =>
                {
                    b.HasOne("GraduationProjectBackendAPI.Models.User.Users", "User")
                        .WithMany("UserVisitHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Courses", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseReviews");

                    b.Navigation("Levels");

                    b.Navigation("UserProgresses");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Level", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.Courses.Section", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Quiz")
                        .IsRequired();

                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("GraduationProjectBackendAPI.Models.User.Users", b =>
                {
                    b.Navigation("AccountVerification")
                        .IsRequired();

                    b.Navigation("CourseEnrollments");

                    b.Navigation("CourseReviews");

                    b.Navigation("UserDetails")
                        .IsRequired();

                    b.Navigation("UserProgresses");

                    b.Navigation("UserVisitHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
